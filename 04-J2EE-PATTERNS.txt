J2EE Patterns
=============
Presentation Layer Design Patterns
1. Intercepting Filter Pattern
2. Front Controller Pattern
3. View Helper Pattern
4. Composite View Pattern
Business Layer Design Patterns
1. Business Delegate Pattern
2. Service Locator Pattern
3. Session Facade Pattern
4. Transfer Object Pattern
5. Data Access Object Pattern
6. Web Service Broker Pattern


1. Intercepting Filter Pattern
==============================
1. Intercepting Filter Pattern
The Intercepting Filter Pattern provides a way to intercept and manipulate requests or responses before they reach their final destination.


interface Filter {
    void execute(String request);
}

class AuthenticationFilter implements Filter {
    public void execute(String request) {
        System.out.println("Authenticating request: " + request);
    }
}

class DebugFilter implements Filter {
    public void execute(String request) {
        System.out.println("Request log: " + request);
    }
}

class FilterChain {
    private List<Filter> filters = new ArrayList<>();
    private Target target;
    
    public void addFilter(Filter filter) {
        filters.add(filter);
    }
    
    public void execute(String request) {
        for (Filter filter : filters) {
            filter.execute(request);
        }
        target.execute(request);
    }
    
    public void setTarget(Target target) {
        this.target = target;
    }
}

class FilterManager {
    private FilterChain filterChain;
    
    public FilterManager(Target target) {
        filterChain = new FilterChain();
        filterChain.setTarget(target);
    }
    
    public void setFilter(Filter filter) {
        filterChain.addFilter(filter);
    }
    
    public void filterRequest(String request) {
        filterChain.execute(request);
    }
}

class Target {
    public void execute(String request) {
        System.out.println("Executing request: " + request);
    }
}

class Client {
    private FilterManager filterManager;
    
    public void setFilterManager(FilterManager filterManager) {
        this.filterManager = filterManager;
    }
    
    public void sendRequest(String request) {
        filterManager.filterRequest(request);
    }
}

public class InterceptingFilterPatternDemo {
    public static void main(String[] args) {
        FilterManager filterManager = new FilterManager(new Target());
        filterManager.setFilter(new AuthenticationFilter());
        filterManager.setFilter(new DebugFilter());
        
        Client client = new Client();
        client.setFilterManager(filterManager);
        client.sendRequest("HOME");
    }
}

===========================
2. Front Controller Pattern
===========================
The Front Controller Pattern provides a centralized controller for handling all requests, 
reducing the complexity of the application by providing a single point of entry.

class HomeView {
    public void show() {
        System.out.println("Displaying Home Page");
    }
}

class StudentView {
    public void show() {
        System.out.println("Displaying Student Page");
    }
}

class Dispatcher {
    private HomeView homeView;
    private StudentView studentView;
    
    public Dispatcher() {
        homeView = new HomeView();
        studentView = new StudentView();
    }
    
    public void dispatch(String request) {
        if (request.equalsIgnoreCase("STUDENT")) {
            studentView.show();
        } else {
            homeView.show();
        }
    }
}

class FrontController {
    private Dispatcher dispatcher;
    
    public FrontController() {
        dispatcher = new Dispatcher();
    }
    
    private boolean isAuthenticUser() {
        System.out.println("User is authenticated successfully.");
        return true;
    }
    
    private void trackRequest(String request) {
        System.out.println("Page requested: " + request);
    }
    
    public void dispatchRequest(String request) {
        trackRequest(request);
        if (isAuthenticUser()) {
            dispatcher.dispatch(request);
        }
    }
}

public class FrontControllerPatternDemo {
    public static void main(String[] args) {
        FrontController frontController = new FrontController();
        frontController.dispatchRequest("HOME");
        frontController.dispatchRequest("STUDENT");
    }
}

3. View Helper Pattern
=======================
The View Helper Pattern separates the presentation and business logic, making the view easier to manage and understand.

class Product {
    private String name;
    private double price;
    
    public Product(String name, double price) {
        this.name = name;
        this.price = price;
    }
    
    public String getName() {
        return name;
    }
    
    public double getPrice() {
        return price;
    }
}

class ProductHelper {
    public String formatProductDetails(Product product) {
        return "Product: " + product.getName() + " - Price: $" + product.getPrice();
    }
}

class ProductView {
    private ProductHelper helper;
    
    public ProductView() {
        helper = new ProductHelper();
    }
    
    public void displayProduct(Product product) {
        System.out.println(helper.formatProductDetails(product));
    }
}

public class ViewHelperPatternDemo {
    public static void main(String[] args) {
        Product product = new Product("Laptop", 799.99);
        ProductView view = new ProductView();
        view.displayProduct(product);
    }
}

4. Composite View Pattern
===============================
The Composite View Pattern combines multiple views into a single unified view. 
This pattern is useful for creating complex user interfaces from simpler components.

class HtmlComponent {
    public String render() {
        return "<html></html>";
    }
}

class HeaderComponent extends HtmlComponent {
    @Override
    public String render() {
        return "<header>Header</header>";
    }
}

class FooterComponent extends HtmlComponent {
    @Override
    public String render() {
        return "<footer>Footer</footer>";
    }
}

class BodyComponent extends HtmlComponent {
    @Override
    public String render() {
        return "<body>Body</body>";
    }
}

class CompositeView {
    private List<HtmlComponent> components = new ArrayList<>();
    
    public void addComponent(HtmlComponent component) {
        components.add(component);
    }
    
    public void render() {
        for (HtmlComponent component : components) {
            System.out.println(component.render());
        }
    }
}

public class CompositeViewPatternDemo {
    public static void main(String[] args) {
        CompositeView compositeView = new CompositeView();
        compositeView.addComponent(new HeaderComponent());
        compositeView.addComponent(new BodyComponent());
        compositeView.addComponent(new FooterComponent());
        
        compositeView.render();
    }
}



Business Layer Design Patterns

1. Business Delegate Pattern
==================================
The Business Delegate Pattern decouples the presentation layer from the business layer 
by providing an intermediary (delegate) class that interfaces with the business services.

class BusinessService {
    public void doProcessing() {
        System.out.println("Processing task by invoking Business Service");
    }
}

class BusinessLookUp {
    public BusinessService getBusinessService() {
        return new BusinessService();
    }
}

class BusinessDelegate {
    private BusinessLookUp lookupService = new BusinessLookUp();
    private BusinessService businessService;
    
    public void doTask() {
        businessService = lookupService.getBusinessService();
        businessService.doProcessing();
    }
}

class Client {
    BusinessDelegate businessService;
    
    public Client(BusinessDelegate businessService) {
        this.businessService = businessService;
    }
    
    public void doTask() {
        businessService.doTask();
    }
}

public class BusinessDelegatePatternDemo {
    public static void main(String[] args) {
        BusinessDelegate businessDelegate = new BusinessDelegate();
        Client client = new Client(businessDelegate);
        client.doTask();
    }
}


2. Service Locator Pattern
==========================
The Service Locator Pattern provides a way to encapsulate the lookup process for locating various business services.
interface Service {
    String getName();
    void execute();
}

class Service1 implements Service {
    public void execute() {
        System.out.println("Executing Service1");
    }

    public String getName() {
        return "Service1";
    }
}

class Service2 implements Service {
    public void execute() {
        System.out.println("Executing Service2");
    }

    public String getName() {
        return "Service2";
    }
}

class InitialContext {
    public Object lookup(String jndiName) {
        if (jndiName.equalsIgnoreCase("SERVICE1")) {
            return new Service1();
        } else if (jndiName.equalsIgnoreCase("SERVICE2")) {
            return new Service2();
        }
        return null;
    }
}

class Cache {
    private List<Service> services;

    public Cache() {
        services = new ArrayList<Service>();
    }

    public Service getService(String serviceName) {
        for (Service service : services) {
            if (service.getName().equalsIgnoreCase(serviceName)) {
                return service;
            }
        }
        return null;
    }

    public void addService(Service newService) {
        boolean exists = false;
        for (Service service : services) {
            if (service.getName().equalsIgnoreCase(newService.getName())) {
                exists = true;
            }
        }
        if (!exists) {
            services.add(newService);
        }
    }
}

class ServiceLocator {
    private static Cache cache;

    static {
        cache = new Cache();
    }

    public static Service getService(String jndiName) {
        Service service = cache.getService(jndiName);

        if (service != null) {
            return service;
        }

        InitialContext context = new InitialContext();
        Service service1 = (Service) context.lookup(jndiName);
        cache.addService(service1);
        return service1;
    }
}

public class ServiceLocatorPatternDemo {
    public static void main(String[] args) {
        Service service = ServiceLocator.getService("Service1");
        service.execute();
        service = ServiceLocator.getService("Service2");
        service.execute();
        service = ServiceLocator.getService("Service1");
        service.execute();
        service = ServiceLocator.getService("Service2");
        service.execute();
    }
}


3. Session Facade Pattern
==========================
The Session Facade Pattern encapsulates the complexity of interactions between business objects and provides a simple interface to the client.

class Product {
    private String name;
    
    public Product(String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
}

class InventoryService {
    public void checkInventory(Product product) {
        System.out.println("Checking inventory for " + product.getName());
    }
}

class PricingService {
    public void calculatePrice(Product product) {
        System.out.println("Calculating price for " + product.getName());
    }
}

class OrderService {
    public void placeOrder(Product product) {
        System.out.println("Placing order for " + product.getName());
    }
}

class OrderFacade {
    private InventoryService inventoryService;
    private PricingService pricingService;
    private OrderService orderService;
    
    public OrderFacade() {
        inventoryService = new InventoryService();
        pricingService = new PricingService();
        orderService = new OrderService();
    }
    
    public void processOrder(Product product) {
        inventoryService.checkInventory(product);
        pricingService.calculatePrice(product);
        orderService.placeOrder(product);
    }
}

public class SessionFacadePatternDemo {
    public static void main(String[] args) {
        OrderFacade orderFacade = new OrderFacade();
        Product product = new Product("Laptop");
        orderFacade.processOrder(product);
    }
}


4. Transfer Object Pattern
=============================
The Transfer Object Pattern is used to pass data with multiple attributes in one shot from client to server to avoid multiple calls to the server.

import java.util.ArrayList;
import java.util.List;

class StudentVO {
    private String name;
    private int rollNo;
    
    StudentVO(String name, int rollNo) {
        this.name = name;
        this.rollNo = rollNo;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public int getRollNo() {
        return rollNo;
    }
    
    public void setRollNo(int rollNo) {
        this.rollNo = rollNo;
    }
}

class StudentBO {
    List<StudentVO> students;
    
    public StudentBO() {
        students = new ArrayList<>();
        students.add(new StudentVO("John", 0));
        students.add(new StudentVO("Jane", 1));
    }
    
    public void deleteStudent(StudentVO student) {
        students.remove(student.getRollNo());
        System.out.println("Student: Roll No " + student.getRollNo() + ", deleted from database");
    }
    
    public List<StudentVO> getAllStudents() {
        return students;
    }
    
    public StudentVO getStudent(int rollNo) {
        return students.get(rollNo);
    }
    
    public void updateStudent(StudentVO student) {
        students.get(student.getRollNo()).setName(student.getName());
        System.out.println("Student: Roll No " + student.getRollNo() + ", updated in the database");
    }
}

public class TransferObjectPatternDemo {
    public static void main(String[] args) {
        StudentBO studentBusinessObject = new StudentBO();

        for (StudentVO student : studentBusinessObject.getAllStudents()) {
            System.out.println("Student: [Roll No : " + student.getRollNo() + ", Name : " + student.getName() + " ]");
        }

        StudentVO student = studentBusinessObject.getAllStudents().get(0);
        student.setName("Michael");
        studentBusinessObject.updateStudent(student);

        studentBusinessObject.getStudent(0);
        System.out.println("Student: [Roll No : " + student.getRollNo() + ", Name : " + student.getName() + " ]");
    }
}



Sure! Here are examples of each of the requested business layer design patterns:

1. Business Delegate Pattern
The Business Delegate Pattern decouples the presentation layer from the business layer by providing an intermediary (delegate) class that interfaces with the business services.

Example:
java
Copy code
class BusinessService {
    public void doProcessing() {
        System.out.println("Processing task by invoking Business Service");
    }
}

class BusinessLookUp {
    public BusinessService getBusinessService() {
        return new BusinessService();
    }
}

class BusinessDelegate {
    private BusinessLookUp lookupService = new BusinessLookUp();
    private BusinessService businessService;
    
    public void doTask() {
        businessService = lookupService.getBusinessService();
        businessService.doProcessing();
    }
}

class Client {
    BusinessDelegate businessService;
    
    public Client(BusinessDelegate businessService) {
        this.businessService = businessService;
    }
    
    public void doTask() {
        businessService.doTask();
    }
}

public class BusinessDelegatePatternDemo {
    public static void main(String[] args) {
        BusinessDelegate businessDelegate = new BusinessDelegate();
        Client client = new Client(businessDelegate);
        client.doTask();
    }
}
2. Service Locator Pattern
The Service Locator Pattern provides a way to encapsulate the lookup process for locating various business services.

Example:
java
Copy code
interface Service {
    String getName();
    void execute();
}

class Service1 implements Service {
    public void execute() {
        System.out.println("Executing Service1");
    }

    public String getName() {
        return "Service1";
    }
}

class Service2 implements Service {
    public void execute() {
        System.out.println("Executing Service2");
    }

    public String getName() {
        return "Service2";
    }
}

class InitialContext {
    public Object lookup(String jndiName) {
        if (jndiName.equalsIgnoreCase("SERVICE1")) {
            return new Service1();
        } else if (jndiName.equalsIgnoreCase("SERVICE2")) {
            return new Service2();
        }
        return null;
    }
}

class Cache {
    private List<Service> services;

    public Cache() {
        services = new ArrayList<Service>();
    }

    public Service getService(String serviceName) {
        for (Service service : services) {
            if (service.getName().equalsIgnoreCase(serviceName)) {
                return service;
            }
        }
        return null;
    }

    public void addService(Service newService) {
        boolean exists = false;
        for (Service service : services) {
            if (service.getName().equalsIgnoreCase(newService.getName())) {
                exists = true;
            }
        }
        if (!exists) {
            services.add(newService);
        }
    }
}

class ServiceLocator {
    private static Cache cache;

    static {
        cache = new Cache();
    }

    public static Service getService(String jndiName) {
        Service service = cache.getService(jndiName);

        if (service != null) {
            return service;
        }

        InitialContext context = new InitialContext();
        Service service1 = (Service) context.lookup(jndiName);
        cache.addService(service1);
        return service1;
    }
}

public class ServiceLocatorPatternDemo {
    public static void main(String[] args) {
        Service service = ServiceLocator.getService("Service1");
        service.execute();
        service = ServiceLocator.getService("Service2");
        service.execute();
        service = ServiceLocator.getService("Service1");
        service.execute();
        service = ServiceLocator.getService("Service2");
        service.execute();
    }
}
3. Session Facade Pattern
The Session Facade Pattern encapsulates the complexity of interactions between business objects and provides a simple interface to the client.

Example:
java
Copy code
class Product {
    private String name;
    
    public Product(String name) {
        this.name = name;
    }
    
    public String getName() {
        return name;
    }
}

class InventoryService {
    public void checkInventory(Product product) {
        System.out.println("Checking inventory for " + product.getName());
    }
}

class PricingService {
    public void calculatePrice(Product product) {
        System.out.println("Calculating price for " + product.getName());
    }
}

class OrderService {
    public void placeOrder(Product product) {
        System.out.println("Placing order for " + product.getName());
    }
}

class OrderFacade {
    private InventoryService inventoryService;
    private PricingService pricingService;
    private OrderService orderService;
    
    public OrderFacade() {
        inventoryService = new InventoryService();
        pricingService = new PricingService();
        orderService = new OrderService();
    }
    
    public void processOrder(Product product) {
        inventoryService.checkInventory(product);
        pricingService.calculatePrice(product);
        orderService.placeOrder(product);
    }
}

public class SessionFacadePatternDemo {
    public static void main(String[] args) {
        OrderFacade orderFacade = new OrderFacade();
        Product product = new Product("Laptop");
        orderFacade.processOrder(product);
    }
}


4. Transfer Object Pattern
==============================
The Transfer Object Pattern is used to pass data with multiple attributes in one shot from client to server to avoid multiple calls to the server.


import java.util.ArrayList;
import java.util.List;

class StudentVO {
    private String name;
    private int rollNo;
    
    StudentVO(String name, int rollNo) {
        this.name = name;
        this.rollNo = rollNo;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public int getRollNo() {
        return rollNo;
    }
    
    public void setRollNo(int rollNo) {
        this.rollNo = rollNo;
    }
}

class StudentBO {
    List<StudentVO> students;
    
    public StudentBO() {
        students = new ArrayList<>();
        students.add(new StudentVO("John", 0));
        students.add(new StudentVO("Jane", 1));
    }
    
    public void deleteStudent(StudentVO student) {
        students.remove(student.getRollNo());
        System.out.println("Student: Roll No " + student.getRollNo() + ", deleted from database");
    }
    
    public List<StudentVO> getAllStudents() {
        return students;
    }
    
    public StudentVO getStudent(int rollNo) {
        return students.get(rollNo);
    }
    
    public void updateStudent(StudentVO student) {
        students.get(student.getRollNo()).setName(student.getName());
        System.out.println("Student: Roll No " + student.getRollNo() + ", updated in the database");
    }
}

public class TransferObjectPatternDemo {
    public static void main(String[] args) {
        StudentBO studentBusinessObject = new StudentBO();

        for (StudentVO student : studentBusinessObject.getAllStudents()) {
            System.out.println("Student: [Roll No : " + student.getRollNo() + ", Name : " + student.getName() + " ]");
        }

        StudentVO student = studentBusinessObject.getAllStudents().get(0);
        student.setName("Michael");
        studentBusinessObject.updateStudent(student);

        studentBusinessObject.getStudent(0);
        System.out.println("Student: [Roll No : " + student.getRollNo() + ", Name : " + student.getName() + " ]");
    }
}


5. Data Access Object Pattern
The Data Access Object (DAO) Pattern provides an abstract interface to some type of database or other persistence mechanism. It separates the persistence logic from the business logic.

import java.util.ArrayList;
import java.util.List;

class Student {
    private String name;
    private int rollNo;
    
    Student(String name, int rollNo) {
        this.name = name;
        this.rollNo = rollNo;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public int getRollNo() {
        return rollNo;
    }
    
    public void setRollNo(int rollNo) {
        this.rollNo = rollNo;
    }
}

interface StudentDao {
    List<Student> getAllStudents();
    Student getStudent(int rollNo);
    void updateStudent(Student student);
    void deleteStudent(Student student);
}

class StudentDaoImpl implements StudentDao {
    List<Student> students;
    
    public StudentDaoImpl() {
        students = new ArrayList<>();
        students.add(new Student("John", 0));
        students.add(new Student("Jane", 1));
    }
    
    public List<Student> getAllStudents() {
        return students;
    }
    
    public Student getStudent(int rollNo) {
        return students.get(rollNo);
    }
    
    public void updateStudent(Student student) {
        students.get(student.getRollNo()).setName(student.getName());
        System.out.println("Student: Roll No " + student.getRollNo() + ", updated in the database");
    }
    
    public void deleteStudent(Student student) {
        students.remove(student.getRollNo());
        System.out.println("Student: Roll No " + student.getRollNo() + ", deleted from database");
    }
}

public class DaoPatternDemo {
    public static void main(String[] args) {
        StudentDao studentDao = new StudentDaoImpl();

        for (Student student : studentDao.getAllStudents()) {
            System.out.println("Student: [Roll No : " + student.getRollNo() + ", Name : " + student.getName() + " ]");
        }

        Student student = studentDao.getAllStudents().get(0);
        student.setName("Michael");
        studentDao.updateStudent(student);

        studentDao.getStudent(0);
        System.out.println("Student: [Roll No : " + student.getRollNo() + ", Name : " + student.getName() + " ]");
    }
}


6. Web Service Broker Pattern
==============================
The Web Service Broker Pattern is used to expose business services as web services, allowing remote clients to access them.
// WebServiceBroker.java
import javax.jws.WebMethod;
import javax.jws.WebService;

@WebService
public class WebServiceBroker {
    private ProductService productService = new ProductService();

    @WebMethod
    public String getProductInfo(String productName) {
        return productService.getProductInfo(productName);
    }
}

// ProductService.java
public class ProductService {
    public String getProductInfo(String productName) {
        // Simulating product information retrieval
        if ("Laptop".equalsIgnoreCase(productName)) {
            return "Product: Laptop, Price: $1000, Availability: In Stock";
        } else if ("Phone".equalsIgnoreCase(productName)) {
            return "Product: Phone, Price: $500, Availability: In Stock";
        } else {
            return "Product not found";
        }
    }
}

// WebServiceClient.java
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;

public class WebServiceClient {
    public static void main(String[] args) throws Exception {
        URL url = new URL("http://localhost:8080/ws/products?wsdl");
        QName qname = new QName("http://in.thiru.webservicebroker/", "WebServiceBrokerService");
        Service service = Service.create(url, qname);
        WebServiceBroker broker = service.getPort(WebServiceBroker.class);

        String productInfo = broker.getProductInfo("Laptop");
        System.out.println(productInfo);
    }
}

